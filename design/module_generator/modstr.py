#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import unicode_literals

GLOB_STR = \
    ("library ieee;\n"
     "    use ieee.std_logic_1164.all;\n"
     "    use ieee.std_logic_unsigned.all;\n\n"
     "package glob is\n\n"
     "    -------- glob constants --------\n\n"
     "    -- maximum degree of polynomial\n"
     "    constant DEGREE : positive := {deg};\n\n"
     "    -- ceil(log2(degree))\n"
     "    constant CEILLGN : positive := {ceillgn};\n\n"
     "    -- ceil(log2(degree - 1))\n"
     "    constant CEILLGN1 : positive := {ceillgn1};\n\n"
     "    -------- glob constants --------\n\n"
     "    -- vector of all don't care bits\n"
     "    constant DCAREVEC : std_logic_vector(DEGREE downto 0) := (others => '-');\n\n"
     "    constant NDCAREVEC : std_logic_vector(DEGREE downto 0) := (others => '-');\n\n"
     "    -- vector of all low bits\n"
     "    constant ZEROVEC : std_logic_vector(DEGREE downto 0) := (others => '0');\n\n"
     "    -- vector of all high bits\n"
     "    constant HIVEC : std_logic_vector(DEGREE downto 0) := (others => '1');\n\n"
     "    -- vector of all high impedance bits\n"
     "    constant HIIMPVEC : std_logic_vector(DEGREE downto 0) := (others => 'Z');\n\n"
     "    -- vector of representing the DEGREE-bits binary 1\n"
     "    constant ONEVEC: std_logic_vector(DEGREE downto 0) := (0 => '1',\n"
     "                                                        others => '0');\n\n"
     "    constant TWOVEC: std_logic_vector(DEGREE downto 0) := (1 => '1',\n"
     "                                                        others => '0');\n\n"
     "    -------- state types --------\n\n"
     "    type op_state_type is (op1_state, op2_state);\n"
     "    type gen_state_type is (auto_elem_state, gen_elem_state);\n"
     "    type debounce_state_type is (rst_state, en_state);\n\n"
     "    -- memory states\n"
     "    type rd_state_type is (send_addr, get_data);\n"
     "    type wr_state_type is (wr_mem1, wr_mem2, wr_mem3);\n"
     "    type setup_type is (addr_setup, wr);\n\n"
     "end glob;\n")
VARMASK_STR = \
    ("library ieee;\n"
     "    use ieee.std_logic_1164.all;\n"
     "    use ieee.numeric_std.all;\n"
     "library work;\n"
     "    use work.glob.all;\n\n"
     "entity varmask is\n"
     "    generic(\n"
     "        n           : positive := DEGREE\n"
     "    );\n"
     "    port(\n"
     "        poly_bcd    : in std_logic_vector(n downto 2);  -- BCD polynomial\n"
     "        mask        : out std_logic_vector(n downto 0) := (others => '0')\n"
     "   );\n"
     "end varmask;\n\n"
     "architecture behavioral of varmask is\n"
     "begin\n\n"
     "    mask <= {0}"
     "\t\tDCAREVEC;\n\n"
     "end behavioral;\n")
